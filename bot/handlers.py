# bot/handlers.py
import os
import asyncio
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from .keyboards import main_menu_kb, courses_kb, course_menu_kb
from .states import General
from app import crud
from app.database import AsyncSessionLocal
from rag_system.processor import get_qa_chain, process_document

router = Router()

async def get_db_session():
    async with AsyncSessionLocal() as session:
        yield session

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    async for db in get_db_session():
        await crud.get_or_create_user(
            db,
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
    await state.set_state(General.main_menu)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫.", reply_markup=main_menu_kb())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.set_state(General.main_menu)
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

# --- –§–ª–æ—É —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ ---
@router.callback_query(F.data == "my_courses")
async def show_my_courses(callback: CallbackQuery, state: FSMContext):
    async for db in get_db_session():
        user = await crud.get_or_create_user(db, callback.from_user.id, None, None)
        courses = await crud.get_user_courses(db, user.id)
    if not courses:
        await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤. –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—ã–π!", show_alert=True)
        return
    await state.set_state(General.choosing_course)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã:", reply_markup=courses_kb(courses))

@router.callback_query(F.data.startswith("select_course_"))
async def select_course(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[2])
    await state.update_data(current_course_id=course_id)
    await state.set_state(General.course_menu)
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω –∫—É—Ä—Å. –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=course_menu_kb(course_id))

# --- –§–ª–æ—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ ---
@router.callback_query(F.data == "add_course")
async def add_course_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(General.adding_course_name)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞:")

@router.message(General.adding_course_name)
async def add_course_name(message: Message, state: FSMContext):
    course_name = message.text
    async for db in get_db_session():
        user = await crud.get_or_create_user(db, message.from_user.id, None, None)
        await crud.create_course_for_user(db, user, course_name)
    await message.answer(f"‚úÖ –ö—É—Ä—Å '{course_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=main_menu_kb())
    await state.set_state(General.main_menu)

# --- –§–ª–æ—É –ó–∞–¥–∞—Ç—å –í–æ–ø—Ä–æ—Å / –ó–∞–≥—Ä—É–∑–∏—Ç—å –î–æ–∫—É–º–µ–Ω—Ç ---
@router.callback_query(F.data.startswith("ask_question_"))
async def ask_question_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(General.asking_question)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –Ø –ø–æ–∏—â—É –æ—Ç–≤–µ—Ç –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∫—É—Ä—Å–∞.")

@router.message(General.asking_question)
async def process_question(message: Message, state: FSMContext):
    data = await state.get_data()
    course_id = data.get("current_course_id")
    qa_chain = get_qa_chain(course_id)
    if not qa_chain:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞ –µ—â–µ –Ω–µ—Ç —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Ö.")
        return
    
    await message.answer("‚è≥ –î—É–º–∞—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
    loop = asyncio.get_event_loop()
    result = await loop.run_in_executor(None, qa_chain, {"query": message.text})
    await message.answer(result.get("result", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç."))

@router.callback_query(F.data.startswith("upload_doc_"))
async def upload_doc_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(General.uploading_document)
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF-—Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞.")

@router.message(General.uploading_document, F.document)
async def handle_document(message: Message, state: FSMContext, bot: Bot):
    if not message.document.mime_type == 'application/pdf':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
        return
    
    data = await state.get_data()
    course_id = data.get("current_course_id")
    
    await message.answer("‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –Ø —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á—É.")

    file_id = message.document.file_id
    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path
    
    local_file_path = f"data/uploaded_files/{message.document.file_name}"
    await bot.download_file(file_path, destination=local_file_path)
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    await process_document(local_file_path, str(course_id))

    await message.answer(f"‚úÖ –§–∞–π–ª '{message.document.file_name}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∫—É—Ä—Å–∞!", reply_markup=course_menu_kb(course_id))
    await state.set_state(General.course_menu)